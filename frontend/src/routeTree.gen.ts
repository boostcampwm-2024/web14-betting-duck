/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as MyPageImport } from "./routes/my-page";
import { Route as LoginImport } from "./routes/login";
import { Route as DemoLoginImport } from "./routes/demo-login";
import { Route as CreateVoteImport } from "./routes/create-vote";
import { Route as ChatImport } from "./routes/chat";
import { Route as BettingPageImport } from "./routes/betting-page";
import { Route as IndexImport } from "./routes/index";
import { Route as VotingIndexImport } from "./routes/voting.index";
import { Route as PredictDetailUserTypeImport } from "./routes/predict-detail.$userType";
import { Route as VotingRoomIdWaitingImport } from "./routes/voting_.$roomId.waiting";
import { Route as VotingRoomIdVoteImport } from "./routes/voting_.$roomId.vote";

// Create/Update Routes

const MyPageRoute = MyPageImport.update({
  id: "/my-page",
  path: "/my-page",
  getParentRoute: () => rootRoute,
} as any);

const LoginRoute = LoginImport.update({
  id: "/login",
  path: "/login",
  getParentRoute: () => rootRoute,
} as any);

const DemoLoginRoute = DemoLoginImport.update({
  id: "/demo-login",
  path: "/demo-login",
  getParentRoute: () => rootRoute,
} as any);

const CreateVoteRoute = CreateVoteImport.update({
  id: "/create-vote",
  path: "/create-vote",
  getParentRoute: () => rootRoute,
} as any);

const ChatRoute = ChatImport.update({
  id: "/chat",
  path: "/chat",
  getParentRoute: () => rootRoute,
} as any);

const BettingPageRoute = BettingPageImport.update({
  id: "/betting-page",
  path: "/betting-page",
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any);

const VotingIndexRoute = VotingIndexImport.update({
  id: "/voting/",
  path: "/voting/",
  getParentRoute: () => rootRoute,
} as any);

const PredictDetailUserTypeRoute = PredictDetailUserTypeImport.update({
  id: "/predict-detail/$userType",
  path: "/predict-detail/$userType",
  getParentRoute: () => rootRoute,
} as any);

const VotingRoomIdWaitingRoute = VotingRoomIdWaitingImport.update({
  id: "/voting_/$roomId/waiting",
  path: "/voting/$roomId/waiting",
  getParentRoute: () => rootRoute,
} as any);

const VotingRoomIdVoteRoute = VotingRoomIdVoteImport.update({
  id: "/voting_/$roomId/vote",
  path: "/voting/$roomId/vote",
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    "/betting-page": {
      id: "/betting-page";
      path: "/betting-page";
      fullPath: "/betting-page";
      preLoaderRoute: typeof BettingPageImport;
      parentRoute: typeof rootRoute;
    };
    "/chat": {
      id: "/chat";
      path: "/chat";
      fullPath: "/chat";
      preLoaderRoute: typeof ChatImport;
      parentRoute: typeof rootRoute;
    };
    "/create-vote": {
      id: "/create-vote";
      path: "/create-vote";
      fullPath: "/create-vote";
      preLoaderRoute: typeof CreateVoteImport;
      parentRoute: typeof rootRoute;
    };
    "/demo-login": {
      id: "/demo-login";
      path: "/demo-login";
      fullPath: "/demo-login";
      preLoaderRoute: typeof DemoLoginImport;
      parentRoute: typeof rootRoute;
    };
    "/login": {
      id: "/login";
      path: "/login";
      fullPath: "/login";
      preLoaderRoute: typeof LoginImport;
      parentRoute: typeof rootRoute;
    };
    "/my-page": {
      id: "/my-page";
      path: "/my-page";
      fullPath: "/my-page";
      preLoaderRoute: typeof MyPageImport;
      parentRoute: typeof rootRoute;
    };
    "/predict-detail/$userType": {
      id: "/predict-detail/$userType";
      path: "/predict-detail/$userType";
      fullPath: "/predict-detail/$userType";
      preLoaderRoute: typeof PredictDetailUserTypeImport;
      parentRoute: typeof rootRoute;
    };
    "/voting/": {
      id: "/voting/";
      path: "/voting";
      fullPath: "/voting";
      preLoaderRoute: typeof VotingIndexImport;
      parentRoute: typeof rootRoute;
    };
    "/voting_/$roomId/vote": {
      id: "/voting_/$roomId/vote";
      path: "/voting/$roomId/vote";
      fullPath: "/voting/$roomId/vote";
      preLoaderRoute: typeof VotingRoomIdVoteImport;
      parentRoute: typeof rootRoute;
    };
    "/voting_/$roomId/waiting": {
      id: "/voting_/$roomId/waiting";
      path: "/voting/$roomId/waiting";
      fullPath: "/voting/$roomId/waiting";
      preLoaderRoute: typeof VotingRoomIdWaitingImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "/betting-page": typeof BettingPageRoute;
  "/chat": typeof ChatRoute;
  "/create-vote": typeof CreateVoteRoute;
  "/demo-login": typeof DemoLoginRoute;
  "/login": typeof LoginRoute;
  "/my-page": typeof MyPageRoute;
  "/predict-detail/$userType": typeof PredictDetailUserTypeRoute;
  "/voting": typeof VotingIndexRoute;
  "/voting/$roomId/vote": typeof VotingRoomIdVoteRoute;
  "/voting/$roomId/waiting": typeof VotingRoomIdWaitingRoute;
}

export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "/betting-page": typeof BettingPageRoute;
  "/chat": typeof ChatRoute;
  "/create-vote": typeof CreateVoteRoute;
  "/demo-login": typeof DemoLoginRoute;
  "/login": typeof LoginRoute;
  "/my-page": typeof MyPageRoute;
  "/predict-detail/$userType": typeof PredictDetailUserTypeRoute;
  "/voting": typeof VotingIndexRoute;
  "/voting/$roomId/vote": typeof VotingRoomIdVoteRoute;
  "/voting/$roomId/waiting": typeof VotingRoomIdWaitingRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/": typeof IndexRoute;
  "/betting-page": typeof BettingPageRoute;
  "/chat": typeof ChatRoute;
  "/create-vote": typeof CreateVoteRoute;
  "/demo-login": typeof DemoLoginRoute;
  "/login": typeof LoginRoute;
  "/my-page": typeof MyPageRoute;
  "/predict-detail/$userType": typeof PredictDetailUserTypeRoute;
  "/voting/": typeof VotingIndexRoute;
  "/voting_/$roomId/vote": typeof VotingRoomIdVoteRoute;
  "/voting_/$roomId/waiting": typeof VotingRoomIdWaitingRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/"
    | "/betting-page"
    | "/chat"
    | "/create-vote"
    | "/demo-login"
    | "/login"
    | "/my-page"
    | "/predict-detail/$userType"
    | "/voting"
    | "/voting/$roomId/vote"
    | "/voting/$roomId/waiting";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/"
    | "/betting-page"
    | "/chat"
    | "/create-vote"
    | "/demo-login"
    | "/login"
    | "/my-page"
    | "/predict-detail/$userType"
    | "/voting"
    | "/voting/$roomId/vote"
    | "/voting/$roomId/waiting";
  id:
    | "__root__"
    | "/"
    | "/betting-page"
    | "/chat"
    | "/create-vote"
    | "/demo-login"
    | "/login"
    | "/my-page"
    | "/predict-detail/$userType"
    | "/voting/"
    | "/voting_/$roomId/vote"
    | "/voting_/$roomId/waiting";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  BettingPageRoute: typeof BettingPageRoute;
  ChatRoute: typeof ChatRoute;
  CreateVoteRoute: typeof CreateVoteRoute;
  DemoLoginRoute: typeof DemoLoginRoute;
  LoginRoute: typeof LoginRoute;
  MyPageRoute: typeof MyPageRoute;
  PredictDetailUserTypeRoute: typeof PredictDetailUserTypeRoute;
  VotingIndexRoute: typeof VotingIndexRoute;
  VotingRoomIdVoteRoute: typeof VotingRoomIdVoteRoute;
  VotingRoomIdWaitingRoute: typeof VotingRoomIdWaitingRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BettingPageRoute: BettingPageRoute,
  ChatRoute: ChatRoute,
  CreateVoteRoute: CreateVoteRoute,
  DemoLoginRoute: DemoLoginRoute,
  LoginRoute: LoginRoute,
  MyPageRoute: MyPageRoute,
  PredictDetailUserTypeRoute: PredictDetailUserTypeRoute,
  VotingIndexRoute: VotingIndexRoute,
  VotingRoomIdVoteRoute: VotingRoomIdVoteRoute,
  VotingRoomIdWaitingRoute: VotingRoomIdWaitingRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/betting-page",
        "/chat",
        "/create-vote",
        "/demo-login",
        "/login",
        "/my-page",
        "/predict-detail/$userType",
        "/voting/",
        "/voting_/$roomId/vote",
        "/voting_/$roomId/waiting"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/betting-page": {
      "filePath": "betting-page.tsx"
    },
    "/chat": {
      "filePath": "chat.tsx"
    },
    "/create-vote": {
      "filePath": "create-vote.tsx"
    },
    "/demo-login": {
      "filePath": "demo-login.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/my-page": {
      "filePath": "my-page.tsx"
    },
    "/predict-detail/$userType": {
      "filePath": "predict-detail.$userType.tsx"
    },
    "/voting/": {
      "filePath": "voting.index.tsx"
    },
    "/voting_/$roomId/vote": {
      "filePath": "voting_.$roomId.vote.tsx"
    },
    "/voting_/$roomId/waiting": {
      "filePath": "voting_.$roomId.waiting.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
